/*Given an unsorted array of positive integers, design an algorithm and implement it using a program
to find whether there are any duplicate elements in the array or not. (use sorting) (Time Complexity
= O(n log n))
*/

#include <stdio.h>
#include <stdlib.h>


void merge(int arr[],int l,int mid,int h)
{
    int count=0;
    int i=l,j=mid+1;
    int temp[h-l+1];
    int k=0;

    while (i<=mid && j<=h)
    {
        if (arr[i]<arr[j])
            temp[k++]=arr[i++];
        else
        {
            temp[k++]=arr[j++];
            count+=mid-i+1;
        }
    }
    for (;i<=mid;)
         temp[k++]=arr[i++];

    for (;j<=h;)
         temp[k++]=arr[j++];

    for (int f=0;f<k;f++)
        arr[f+l]=temp[f];
}
void merge_sort(int arr[],int l,int h)
{
    if (l<h)
    {
        int mid=l+(h-l)/2;
        merge_sort(arr,l,mid);
        merge_sort(arr,mid+1,h);
        merge(arr,l,mid,h);
    }
}
int main()
{
    int n;
   int arr[50];
  
   int count = 1;
   printf("Enter the number of arrays : ");
   scanf("%d",&n);
   
   
   while(count<=n)
   {
       int num;
       printf("Enter the number of elements is %dst array ",count);
       scanf("%d",&num);
       printf("Enter %d elements \n",num);
       for(int i = 0;i<num;i++)
       {
          scanf("%d",&arr[i]);
       }
       merge_sort(arr,0,num-1);
        int flag=0;
        for (int i=0;i<num-1;i++)
        {
            if (arr[i]==arr[i+1])
            { 
                printf("YES\n");
                flag=1;
                break;
            }
        }
        if (flag==0)
            printf("NO\n");
    count += 1;
   }
}





